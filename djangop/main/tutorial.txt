
This tutorial will show you how a game is integrated with the emerald platform. We start with a modified version
of the TANKS! Networking Demo that can be found on the unity asset store. We reorganized the main menu and added a few
panels that we will use with the emerald controller. We also added a few UI Elements.

Download the starter project here and open it up in unity. Then open up LobbyScene. Here you will se the login panel
we've added to the menu. This panel allows players to log into their emerald account. Select LoginSubPanel and create
a new Script called LoginPanel. Then open up the script.

The first thing we need to do to get our login panel working is to create fields for the Login Panel components. These
will allow us to get the login information from the user and display the users info once they have logged in.

Add the following fields to LoginPanel:

<Code Example>

public InputField UsernameInputField;

    public InputField PasswordInputField;

    [HideInInspector] public Player player;

    public Text UsernameText;

    public Text BalanceText;

    public Text ErrorText;

    public Button Button;

<Code Example>

Save the file and head back to the unity editor and add all of the login sub panels components to the login panel script

<image here>

Now that we have all of the components for our login panel lets get our player to log in when the login button is clicked.
Create a new method called Login and add the following code.

<Code Example>

public void Login() {
        EmeraldController.Instance.Login(this.UsernameInputField.text,
                                        this.PasswordInputField.text,
                                        this.OnLogin,
                                        this.OnError);
    }

<Code Example>

To log in the user we use the Login Method on the EmeraldController with the username and password. We give a callback
that is to be executed with the user has successfully logged in. We also provide an exception handler to be called if
there was an error logging in ( for example the users information was incorrect or we were unable to connect to the server)
We still need to implement the OnLogin and OnError methods, so we'll do that next. Add the following method to LoginPanel.

<Code Example>

public void OnLogin(Player player) {
        this.player = player;

        this.ErrorText.text = "";
        this.UsernameInputField.gameObject.SetActive(false);
        this.PasswordInputField.gameObject.SetActive(false);

        this.UsernameText.text = this.player.email;
        this.BalanceText.text = this.player.balance.ToString("C");
        this.UsernameText.gameObject.SetActive(true);
        this.BalanceText.gameObject.SetActive(true);
    }

<Code Example>

First we want to save the player object that was sent to us from the server. This contains the players information.
We then set the ErrorText to an empty string because the login was successful. We deactivate the username and password
inputs because we wont be needing them. We set the username and balance texts to display the users information, then
set them to active.

Now lets create the OnError method

<Code Example>

public void OnError(Exception e) {
        this.ErrorText.text = "Error logging in.";
    }

<Code Example>

This simply displays that there was an error logging in. In a real game you would want to display a different message
based on the exception, that would explain what went wrong. "Invalid login information", "Unable to connect to server",
etc.

Now that we have all of our login logic ready, add the following line of code in the start method so it will be called
when the login button is clicked.

<Code Example>

this.Button.onClick.AddListener(this.Login);

<Code Example>

Head back to the unity editor and start the game. Enter the username and password of one of your test players and click
the login button. If the login details were correct you should see the username and balance of your player displayed
in the login panel, otherwise you should see an error message.

Now that our players can log in, we want them to be able to log out. Add the following code to the onLogin method

public void OnLogin(Player player) {
        this.player = player;

        this.ErrorText.text = "";
        this.UsernameInputField.gameObject.SetActive(false);
        this.PasswordInputField.gameObject.SetActive(false);

        this.UsernameText.text = this.player.email;
        this.BalanceText.text = this.player.balance.ToString("C");
        this.UsernameText.gameObject.SetActive(true);
        this.BalanceText.gameObject.SetActive(true);

        <highlight added>
        this.Button.GetComponentInChildren<Text>().text = "Logout";
        this.Button.onClick.RemoveAllListeners();
        this.Button.onClick.AddListener(this.Logout);

        this.UsernameInputField.text = string.Empty;
        this.PasswordInputField.text = string.Empty;
        <end highlight added>
    }

This changes the text and function of the button to Logout. It also sets the inputfields text to empty, so when a user
logs out their information won't be in the input fields. Now lets implement the Logout method.

public void Logout() {
        this.player = null;
        this.UsernameText.gameObject.SetActive(false);
        this.BalanceText.gameObject.SetActive(false);

        this.UsernameInputField.gameObject.SetActive(true);
        this.PasswordInputField.gameObject.SetActive(true);

        this.Button.GetComponentInChildren<Text>().text = "Login";
        this.Button.onClick.RemoveAllListeners();
        this.Button.onClick.AddListener(this.Login);
    }

This logs the player out and the LoginPanels player to null. Deactivates the username and balance texts.
Reactivates the login inputs. It also resets the text and functionality of the button to Login.

We now have a fully functioning login panel. Now that players can log into our game. We want to be able to create matches
and have the players join them. To do this we will have to modify the LobbyManager.cs file. First lets add
a message type

<Code Example>

private short MsgPlayerEnterLobby = MsgType.Highest + 2;

<Code Example>

Lets start simple. We want a match to start when the first player joins the match.

Add the following message handler to LobbyManager.

<Code Example>

private void HandleMsgPlayerEnterLobby(NetworkMessage msg) {
            if (!EmeraldController.Instance.MatchAlive()) {
                EmeraldController.Instance.CreateMatch(0.25f, match => { Debug.Log("Match Created"); });
            }
        }

<Code Example

This will start a match with a $0.25 wager whenever the first player joins a match. We want to call this command
from the client. Lets make some changes to OnClientConnect
